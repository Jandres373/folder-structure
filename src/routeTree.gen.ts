/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as DocsIndexImport } from './routes/docs/index'
import { Route as DocsLayoutImport } from './routes/docs/_layout'
import { Route as UsersUserIdIndexImport } from './routes/users/$userId/index'
import { Route as DocsDocIdIndexImport } from './routes/docs/$docId/index'

// Create Virtual Routes

const DocsImport = createFileRoute('/docs')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const DocsRoute = DocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRoute,
} as any)

const DocsLayoutRoute = DocsLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => DocsRoute,
} as any)

const UsersUserIdIndexRoute = UsersUserIdIndexImport.update({
  id: '/users/$userId/',
  path: '/users/$userId/',
  getParentRoute: () => rootRoute,
} as any)

const DocsDocIdIndexRoute = DocsDocIdIndexImport.update({
  id: '/$docId/',
  path: '/$docId/',
  getParentRoute: () => DocsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/docs/_layout': {
      id: '/docs/_layout'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsLayoutImport
      parentRoute: typeof DocsRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof DocsImport
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/$docId/': {
      id: '/docs/$docId/'
      path: '/$docId'
      fullPath: '/docs/$docId'
      preLoaderRoute: typeof DocsDocIdIndexImport
      parentRoute: typeof DocsImport
    }
    '/users/$userId/': {
      id: '/users/$userId/'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface DocsRouteChildren {
  DocsLayoutRoute: typeof DocsLayoutRoute
  DocsIndexRoute: typeof DocsIndexRoute
  DocsDocIdIndexRoute: typeof DocsDocIdIndexRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsLayoutRoute: DocsLayoutRoute,
  DocsIndexRoute: DocsIndexRoute,
  DocsDocIdIndexRoute: DocsDocIdIndexRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/docs': typeof DocsLayoutRoute
  '/docs/': typeof DocsIndexRoute
  '/users': typeof UsersIndexRoute
  '/docs/$docId': typeof DocsDocIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/docs': typeof DocsIndexRoute
  '/users': typeof UsersIndexRoute
  '/docs/$docId': typeof DocsDocIdIndexRoute
  '/users/$userId': typeof UsersUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/docs': typeof DocsRouteWithChildren
  '/docs/_layout': typeof DocsLayoutRoute
  '/docs/': typeof DocsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/docs/$docId/': typeof DocsDocIdIndexRoute
  '/users/$userId/': typeof UsersUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs'
    | '/docs/'
    | '/users'
    | '/docs/$docId'
    | '/users/$userId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/docs' | '/users' | '/docs/$docId' | '/users/$userId'
  id:
    | '__root__'
    | '/'
    | '/docs'
    | '/docs/_layout'
    | '/docs/'
    | '/users/'
    | '/docs/$docId/'
    | '/users/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DocsRoute: typeof DocsRouteWithChildren
  UsersIndexRoute: typeof UsersIndexRoute
  UsersUserIdIndexRoute: typeof UsersUserIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DocsRoute: DocsRouteWithChildren,
  UsersIndexRoute: UsersIndexRoute,
  UsersUserIdIndexRoute: UsersUserIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/docs",
        "/users/",
        "/users/$userId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/docs": {
      "filePath": "docs",
      "children": [
        "/docs/_layout",
        "/docs/",
        "/docs/$docId/"
      ]
    },
    "/docs/_layout": {
      "filePath": "docs/_layout.tsx",
      "parent": "/docs"
    },
    "/docs/": {
      "filePath": "docs/index.tsx",
      "parent": "/docs"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/docs/$docId/": {
      "filePath": "docs/$docId/index.tsx",
      "parent": "/docs"
    },
    "/users/$userId/": {
      "filePath": "users/$userId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
